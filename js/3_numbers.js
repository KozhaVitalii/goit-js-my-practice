// Конструктор Number содержит в себе все методы для работы с числами.К примеру парсить строки где есть числа,
// (когда нам необходимо получить число с типом число). К примеру, нам необходимо получить набор величин
// нашего контента:

// Метод Number.parseInt(); - распарсит нам строку и выделит из него необходимое нам целое число.
// Метод работает если число в строке идёт в самом начале строки.Метод извлечет все числа подряд до первого нечислового символа,
// а далее споткнется. К примеру, если будет так: '5к0px', то метод достанет только число 5, если так '50p35x', то только 50
// если при использовании метода в строке первым будет не число (к примеру рх50), то распарсить не удастся и метод выдаст значение NаN

// let elementWidth = '50px';
// console.log(typeof elementWidth);
// console.log(elementWidth);
// let result = Number.parseInt(elementWidth);
// console.log(result);
// console.log(typeof result);

// Если мы хотим перезаписать значение переменнной то такой записи будет не достаточно:
// Number.parseInt(elementWidth);
// Необходимо переопределить значение для ранее объявленной переменной:
// let elementWidth = '50px';
// let elementWidth = Number.parseInt(elementWidth);
// В нашем примере выше, мы распарсиное значение записали в новую переменную:
// let result = Number.parseInt(elementWidth);

// По аналогии с Методом Number.parseInt(); метод Number.parseFloat(); парсит числа в строке, единственное отличие в том, что он умеет
// доставать дробные числа, т.е. умеет распознавать "." в остальном работает аналогично и спотыкается на первом же не числовом символе
// Запятые метод не читает, т.к. в JS разделителем выступает "."

// let elementWidth = '50.25px';
// elementWidth = Number.parseFloat(elementWidth);
// console.log(elementWidth);
// console.log(typeof elementWidth);

// Для работы с деньгами используется метод toFixed - его задача корректно отсечь лишнее кол-во знаков после точки.
// К примеру, есть сумма 1700.4549779, необходимо остечь до 1700.45.Метод в отличии от Number.parseFloat / parseInt вызывается
// на самом числе, т.е. не надо использовать Number. НО, метод выводит строку, поэтому необходимо использовать дополнительно
// Number чтобы преобразовать в числовое значение

// let salary = 1700.25470;
// salary = salary.toFixed(2);
// salary = Number(salary);
// console.log(salary);
// console.log(typeof salary);

// Можно записать более сокращенно, через вложенность методов (матрёшку) один в друго.Т.к.интерпретатор читает из глубины, т.е.
// первым читает самый поздний метод справа на лево:
// Т.е.salary = Number(salary.toFixed(2)); - шаг1 отработает toFixed(), далее шаг2 Number() и шагом 3 через console.log(salary) выведет число

// let salary = 1700.2547;
// salary = Number(salary.toFixed(2));
// console.log(salary);

// Самый упрощенный способ будет выглядеть так:
// let salary = 1700.2547;
// console.log(Number(salary.toFixed(2)));

// Если Number не может преобразовать строку / значение в число, то в консоль выведится NaN, к примеру:

// let value = '12 эту строку невозможно привести к числу';
// console.log(Number(value));

// Объект Math(как и объект Number) содержит в себе набор методов для работы с числами, которые мы можем использовать через ".",
// к примеру Math.PI, Math.LOG2E и т.д.
// Выведи в консоль этот код, чтобы посмотреть все методы имеющиеся у этого объекта:

// console.log(Math);

// К примеру возведем число в степень используя Math:
// const base = 2;
// const power = 3;

// const result = Math.pow(base, power);
// console.log(result);
// Аналогично функцию Math.pow(base, power); можно записать так:
// Это оператор экспоненты, современный синтаксис позволяет написать выражение гораздо проще, при одинаковом результате:
// console.log(base ** power);

// Решим небольшую задачку, где необходимо прописать алгоритм:
// Напиши скрипт, который просит пользователя ввести число и степень,
// Скрипт возводит число в эту степень и выводит результат в консоль
// Описываем шаги:
// Шаг1. Попросить ввести число и сохранить это значение в переменную
// let base = prompt('Введите число');
// base = Number(base);
// console.log(base);
// Шаг2. Попросить ввести степень и сохранить это значение в переменную
// let power = prompt('Введите степень');
// base = Number(power);
// console.log(power);
// Шаг3. Возвести введённые данные в степень и вывести в консоль
// console.log(base ** power);

// Можем ли записать максимально сокращенно?
// let base1 = prompt('Введите число');
// let power1 = prompt('Введите степень');
// console.log(Number(base1) ** Number(power1));

// Разберём ещё один метод = random объекта Math:
// По умолчанию эта функция генерит случайные числа от 0 до 1
// console.log(Math.random());

// Если нам необходимо задать диапазон в рамках, которого необходимо генерить числа,
//     то необходимо прописать такое выражение: Math.random() * (max - min) + min;

// console.log(Math.random() * (50 - 30) + 30);
// В этом случае случайные числа никогда не будут ниже 30 и больше 50

// Чтобы не хардкодить, в выражении можем сразу указывать переменные:
// const max = 50;
// const min = 30;
// console.log(Math.random() * (max - min) + min);

// Разберём метод = round объекта Math. Суть метода округление полученного значения (чилса) до целого числа. 
// Логика округления ничем не отличается от математического округления.  
// const max = 50;
// const min = 30;
// const result = Math.random() * (max - min) + min;
// console.log(Math.round(result));

// Ну либо сокращенно с помощью матрёшки:
// const max = 50;
// const min = 30;
// const result = Math.round(Math.random() * (max - min) + min);
// console.log(result);

// Более практичный пример (usecase), подстановка цвета фона страницы из массива доступных цветов, с помощью метода Math.random() 
const colors = ["red", "tomato", "blue", "teal", "deeppink"];
const max = colors.length - 1;
const min = 0;
const index = Math.round(Math.random() * (max - min) + min);
const color = colors[index];
console.log(color);
document.body.style.backgroundColor = color;