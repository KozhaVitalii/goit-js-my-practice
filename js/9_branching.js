// 1. Оператор ветвления if
// Конструкция if, выглядит следующим образом:

// if () { };

// а именно:
// if (сюда записывается выражение (условие), которое приводится к true или false, предварительно приводится к булю) {
//     тело - которое выполняется, если выполняется условие заложенное в if, если условие в if не выполняется,
// то скрипт выходит из конструкции и идёт выполняться следующий код
// }

// К примеру:

// if (5 > 3) { console.log('Условие if выполнено'); };
// console.log('Условие if не выполнено');
// Обратим внимание, что в данном случае, если if выполняется, то в консоль выведет две записи. Не очень хорошо.

// 2. Оператор ветвления if...else - если да, сделай это, в противном случае сделай это

// if (5 > 30) { console.log('Условие if выполнено'); }
// else { console.log('Условие if не выполнено') };
// В такой конструкции выполнится одно из условий.А именн, если отработает условие if то в консоль выведет
// 'Условие if выполнено', если нет, то в консоль выведет 'Условие if не выполнено', т.е. отработает else

// 3. Оператор ветвления else...if - проверка множества условий
// const salary = 1501;
// if (salary <= 500) {
//   console.log('Грейд 1');
// } else if (salary > 500 && salary <= 800) {
//   console.log('Грейд 2');
// } else if (salary > 800 && salary <= 1000) {
//   console.log('Грейд 3');
// } else {
//   console.log('Грейд 4');
// }

// 4. Тернарный оператор - используется в простых случаях только для записи в переменную по условию 
// и не для чего больше. Если в выражении есть три и более условий, то тернарный оператор не подходит
// Слишком избыточный код для простой задачи по условию:
const balance = 1000;
let message;
if (balance > 0) {
  message = 'Позитивный баланс';
} else {
  message = 'Негативный баланс';
}
console.log(message)
// Напишем более простой способ с использованием тернарного оператора:
// const message = условие ? выражение1 : выражение2  Знак "?" и ":" спец символы для тернарного оператора.
// Суть такая проверяется условие на true или false, если true, то выражение1, если false,то выражение2
// В итоге наше выражение будет выглядеть так:
const message1 = balance > 0 ? 'Позитивный баланс' : 'Негативный баланс';
console.log(message1);

// 5. Блочная область видимости переменных
// Переменные объявленные через const или let подчиняются блочной области видимости.
// Если переменная объявлена внутри конструкции if, либо любой другой, то такая переменная будет
// являться локальной переменной и использование данной переменной за пределами конструкции будет не доступно. 
// !!! Работает по принципу матрешки: то что объявлено внутри, не видно снаружи,
// но то что объявлено снаружи видно внутри. !!!
Пример:

const b = 10;
if (true) {
    console.log(b);
    // "b" видно как снаружи так и внутри конструкции
    const a = 5;
    console.log(a);
    // "а" видно только внутри конструкции
}

console.log(a);    
// локальная не видим
console.log(b);
// глобальная видим везде
    